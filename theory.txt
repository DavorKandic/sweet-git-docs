##############################--- GIT DOCS ---#######################################

General:
--------
1) Git stores snapshots
=======================
When you commit, git stores snapshots of the entire file, 
it does not store diffs from the previous commit. 
As a repository grows, the object count grows exponentially 
and clearly it becomes inefficient to store the data as loose object files. 
Hence, git packs them and stores them as a . pack file.

2) Git Database
===============
At the core, git is nothing but a key-value data store. 
We can insert any kind of content into a Git repository and Git will hand us back a unique key 
we can later use to retrieve that content.
Git uses SHA-1 hash of the content (content could either refer a file or commit or directory structure) 
as the key and the content itself (compressed) acts as the value.

3) Git is a decentralized VCS 
=============================
— In a centralized VCS, the database resides on a central server and you checkout a copy from the server. 
Most of the commands require you to contact the central database and hence require network access. 
In a decentralized or distributed VCS, each and every node has a copy of the database 
and hence you clone a copy from a remote server. 
Note that the remote server has no special permissions except for the fact that all the nodes have access to the remote server. 
As a result of this, most of the commands on git (except git push or git pull) can be performed without network access.

4) Content of .git dir
======================
When you clone a git repository, it creates a .git folder at the root of the repository. 
This is where git stores all the data.

Contents of .git are:
The BRANCHES directory isn’t used by newer Git versions.
The DESCRIPTION file is used to provide a name to the repository with the description and is only used by the Web UI.
The CONFIG file contains your project-specific configuration options
The INFO directory keeps a global exclude file for ignored patterns that you don’t want to track in a .gitignore file.
The HOOKS directory contains your client- or server-side hook scripts.
The INDEX file is where Git stores your staging area information.

3 main components in this .git folder — 

OBJECTS directory — The objects directory stores all the content of the git database.
REFS directory — The refs directory stores pointers into commit objects in that data.
HEAD file — The HEAD file points to the branch you currently have checked out.

5) 4 types of git objects
=========================
-COMMIT
-TREE
-BLOB
-ANNOTATED TAG

TREEs are Git objects used to store contents of a directory.
Each tree contains pointers that can refer to blobs and to other trees.
Each entry in a tree contains the SHA-1 hash of a blob or tree,
as well as the mode, type and filename.

BLOBs (binary large object) are the object type Git uses to store the contents of files 
in a given repository.
Blobs don't even include the filenames of each file or any other data.
They just store the contents of a file!

So, BLOBs store contents of a file, and TREEs store contents of a directory.

COMMITs objects combine a tree object along with information about the context
that led to the current tree.
Commits store a reference to parent commit(s), the author, the commiter,
and of course the commit message!